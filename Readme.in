# ipytest - unit tests in IPython notbeooks

Sometimes quick experiments in IPython grow large and you find yourself wanting
unit tests. This module aims to make testing code in IPython notebooks easy. At
its core, it offers a way to run [`pytest`](https://pytest.org) tests inside the
notebook environment. It is also designed to make the transfer of the tests into
proper python modules easy.

Installation: `pip install ipytest`

Features:

- support for [pytest](pytest.org) inside notebooks (with all bells and
  whistles)
- tight integration with IPython via magics and automatic code transforms

## Changes

- `dev`: add helper to detect whether a notebook is executed as a test.
- `0.5.0`: fix assertion rewriting via magics in `ipython>=7`. Add support to
  raise a `RuntimeError` on test errors. Add support to set base arguments.
  Allow to set multiple config values at the same time. Use config to control
  magics. Currently in beta, use `ipytest==0.5.0b1`.
- `0.4.0`: add support for automatic AST transforms, deprecate non pytest API.
- `0.3.0`: change default pattern for `clean_tests` to match pytest discovery
- `0.2.2`: add support for assert rewriting with current pytest versions
- `0.2.1`: add ipython magics to simplify test execution
- `0.2.0`: support for using pytest inside notebooks
- `0.1.0`: support for running `unittest.FunctionTestCase`,
  `unittest.TestCases`, and `doctests`.

## Usage

For usage see the [example notebook](./Example.ipynb) or the documentation for
the core API below.

The suggested way to import `ipytest` is:

```python
import ipytest
ipytest.config(rewrite_asserts=True, magics=True)
```

## Reference

.. autofunction:: ipytest.run

### `%%run_pytest ...`

IPython magic that first executes the cell, then executes `ipytest.run()`.
Any arguments passed on the magic line be passed on to pytest.
To register the magics, run `ipytest.config.magics = True` first.

For example:

```python
%%run_pytest -qq


def test_example():
    ...

```

### `%%run_pytest[clean] ...`

Same as the `%%run_pytest`, but cleans any previously found tests, i.e., only
tests defined in the current cell are executed.
To register the magics, run `ipytest.config.magics = True` first.

### `%%rewrite_asserts`

Rewrite any asserts in the current cell using pytest without running the tests.
To get best results run the tests with `run_pytest`.
To register the magics, run `ipytest.config.magics = True` first.

For example::

```python
%%rewrite_asserts

def test_example():
    ...
```

### `ipytest.config`

Configure `ipytest`. The following settings are suported:

- `ipytest.config.rewrite_asserts` (default: `False`): enable ipython AST
  transforms globally to rewrite asserts.
- `ipytest.config.magics` (default: `False`): if set to `True` register the
  ipytest magics.
- `ipytest.config.clean` (default: `[Tt]est*`): the pattern used to clean
  variables.
- `ipytest.config.base_args` (default: `()`): pytest command line arguments to
  prepend to every pytest invocation. For example setting
  `ipytest.config.base_args = ['-qq']` will execute pytest with the least
  verbosity.
- `ipytest.config.raise_on_error` (default: `False`): if `True`, unsuccessful
  invocations will raise a `RuntimeError`.

To set multiple arguments at once, the config object can also be called, as in:

```python

ipytest.config(rewrite_asserts=True, raise_on_error=True)
```

### `ipytest.exit_code`

The return code of the last pytest invocation.

## Development

To execute the unit tests of `ipytest` run

    pipenv sync --dev
    pipenv run test

Before commit execute `pipenv run precommit` to update the documentation,
format the code, and run tests.

.. autofunction:: ipytest.clean_tests

.. autofunction:: ipytest.reload

.. autofunction:: ipytest.running_as_test

## Legacy functionality

.. autofunction:: ipytest.run_pytest

.. autofunction:: ipytest.run_tests

.. autofunction:: ipytest.collect_tests

.. autofunction:: ipytest.assert_equals

.. autofunction:: ipytest.get_assert_function

.. autofunction:: ipytest.unittest_assert_equals

## License

.. literalinclude:: License.md
